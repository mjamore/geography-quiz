{
  "extends": ["next/core-web-vitals", "next/typescript"],
  "rules": {
    "@typescript-eslint/no-explicit-any": "warn", // warn when we use the 'any' type
    "@typescript-eslint/no-var-requires": 0, // '0' means we can use require statements
    "@typescript-eslint/no-inferrable-types": "off", // don't complain when we declare a type that can be inferred
    "@typescript-eslint/no-unused-vars": "error", // error when we have unused variables
    "@typescript-eslint/prefer-for-of": "warn", // warn when we use a for loop; prefer the use of a for-of loop to avoid manual iteration
    "array-bracket-spacing": ["error", "never"], // no spacing around array values
    "arrow-parens": 0, // '0' means you can skip the parenthesis around the arrow function argument when there is only one argument
    "brace-style": ["error", "1tbs", { "allowSingleLine": true }], // opening braces should be on the same line as the statement
    "comma-dangle": ["error", "always-multiline"], // enforce trailing commas on multiline arrays/objects
    "eol-last": "error", // require a newline at the end of the file
    "eqeqeq": "error", // require the use of === and !==
    "import/extensions": 0, // '0' means import statements do not require a file extension
    "import/no-unresolved": 0, // '0' means we are allowed to have unresolved imports
    "import/order": ["error", { "pathGroups": [{ "pattern": "@/**", "group": "external", "position": "after" }] }], // error when imports are not in the expected order
    "indent": ["error", 2, { "SwitchCase": 1 }], // use an indentation of 2 spaces
    "keyword-spacing": ["error", { "before": true, "after": true }], // require spaces around keywords
    "max-len": 0, // '0' means lines can be as long as you want
    "no-console": "warn", // we don't allow the use of console.log
    "no-empty": "error", // disallow empty blocks
    "no-multi-spaces": "error", // disallow multiple spaces
    "no-param-reassign": 0, // '0' means we are allowed to reassign function parameters to new values
    "no-trailing-spaces": "error", // disallow trailing spaces
    "no-unused-vars": "off", // setting to off so it doesn't conflict with @typescript-eslint/no-unused-vars
    "no-useless-catch": 0, // allow useless catch clauses; we always wrap async function calls in a try/catch block
    "no-var": "error", // disallow the use of var
    "no-multiple-empty-lines": ["error", { "max": 1 }], // disallow multiple empty lines
    "no-useless-escape": 0, // '0' means we are allowed to have useless escape characters (used in our unit test files)
    "object-curly-newline": ["error"], // allow many named imports on a single line
    "object-curly-spacing": ["error", "always"], // require spaces around brackets
    "padded-blocks": ["error", "never"], // no padding around blocks
    "quotes": ["error", "single"], // use single quotes
    "react/jsx-sort-props": ["error", { "callbacksLast": true, "shorthandFirst": true, "ignoreCase": true }], // sort props alphabetically
    "react/prop-types": "off", // 'off' means we don't need to declare prop types
    "react/react-in-jsx-scope": "off", // 'off' means we don't need to import React in every file
    "semi": ["error", "always"], // require semicolons at the end of statements
    "space-before-blocks": ["error", "always"], // require a space between blocks
    "space-before-function-paren": ["error", { "anonymous": "always", "named": "never", "asyncArrow": "always" }], // no space between function name and parenthesis
    "space-infix-ops": ["error", { "int32Hint": false }] // require spaces around operators
  }
}
